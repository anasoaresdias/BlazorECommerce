@page "/login"
@inject NavigationManager navigation
@inject IAuthenticationServices authenticationservices
@inject ICartService cartservice

<h3>Login</h3>
<EditForm Model = "userLogin" OnValidSubmit = "HandleLogin">
    <DataAnnotationsValidator/>
    <div>
        <label for="usermane">Userame</label>
        <InputText id = "username" @bind-Value="userLogin.UserName" class="form-control"/>
        <ValidationMessage For="@(()=>userLogin.UserName)"/>
    </div>
    <div>
        <label for="password">Password</label>
        <InputText id = "password" @bind-Value="userLogin.Password" type = "password" class="form-control"/>
        <ValidationMessage For="@(()=>userLogin.Password)"/>
    </div>
    <br />
    <button type="submit" class = "button-24" >Login</button>
    <button @onclick="Register" class = "button-24" >Register</button>
    <div>
        <span>@Message</span>
    </div>
</EditForm>


@code {
    private UserLoginDTO userLogin = new UserLoginDTO();
    private string Message = string.Empty;
    private string returnUrl = string.Empty;

    protected override void OnInitialized()
    {
        var uri = navigation.ToAbsoluteUri(navigation.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url;
        }
    }

    async Task HandleLogin()
    {
        var result = await authenticationservices.Login(userLogin);
        await cartservice.StoreCartItems(true);
        Message = result.Message;
        navigation.NavigateTo(returnUrl);
    }

    void Register()
    {
        navigation.NavigateTo("register");
    }
}