@page "/product/{id:int}"
@inject IProductService ProductService
@inject ICartService cartservice

@if(product == null)
{
    <span>@message</span>
}
else
{
    <div class = "media">
        <div class="media-img-wrapper mr-2">
            <img class="media-img" src = "@product.ImageUrl" alt = "@product.Title"/>
        </div>
        <div class="media-body"> 
            <h2 class = "mb-0">@product.Title</h2>
            <p>@product.Description</p>
            @if(@GetSelectedVariant() != null)
            {
                @if(@GetSelectedVariant().OriginalPrice > @GetSelectedVariant().Price)
                {
                    <h6 class = "text-muted original-price"> €@GetSelectedVariant().OriginalPrice</h6>
                }
                <h4 class = "price">
                    €@GetSelectedVariant().Price
                </h4>
            }
            @if(product.ProductVariants != null && product.ProductVariants.Count > 1)
            {
                <div class = "form-group">
                    <select class = "form-select" @bind="currenttypeid">
                        @foreach (var item in product.ProductVariants)
                       {
                           <option value = "@item.ProductTypeId">@item.ProductType.Name</option>
                       }
                    </select>
                </div>
            }
            <br/>
            <button class="button-24" @onclick="AddToCart">
                <i class="oi oi-cart"></i> Add to cart
            </button>
        </div>
    </div>
}
@code {
    private Product? product = null;

    private string message = string.Empty;

    private int currenttypeid = 1;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        message = "Loading Product ...";
        var result = await ProductService.GetProduct(Id);
        if (!result.Success)
        {
            message = result.Message;
        }
        else
        {
            product = result.Data;
            if(product.ProductVariants.Count > 0)
            {
                currenttypeid = product.ProductVariants[0].ProductTypeId;
            }
        }
    }

    private ProductVariant GetSelectedVariant()
    {
        var variant = product.ProductVariants.FirstOrDefault(x=>x.ProductTypeId == currenttypeid);
        return variant;
    }

    private async Task AddToCart()
    {
        var productvariant = GetSelectedVariant();
        var cartitem = new CartItem
            {
                ProductId = productvariant.ProductId,
                ProductTypeId = productvariant.ProductTypeId
            };
            await cartservice.AddToCart(cartitem);
    }
}
